// Code generated by go-bindata.
// sources:
// update_status.lua
// DO NOT EDIT!

package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _update_statusLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6f\xda\x40\x14\x3c\xd7\xbf\x62\xe4\x4b\x40\xc2\x51\x20\xe1\x52\x89\x43\xab\x58\x29\xb4\x45\x11\x24\x55\x2b\xb4\xaa\x36\xde\xe7\x76\x89\xd9\x45\xfb\xd6\x81\x5c\xf2\xdb\x2b\xef\x82\x71\xfa\x75\xb3\x3c\xf3\x66\xde\x9b\xd9\x2c\xc3\xc7\xfc\xdb\xf2\x6d\x92\x65\xc0\x6a\x28\xf0\x48\xcf\xb0\x25\xfc\x4f\xc2\xda\x3e\x40\x11\x17\x4e\x6f\xbd\x75\x0d\xe3\xdd\xe2\xe6\xfe\x73\x3e\xbf\xeb\xf0\xf3\xfd\x96\x0a\x4f\x0a\xb3\xe9\x75\xfc\x39\x12\x98\xd3\x0e\xec\xa5\xaf\xb9\xa3\x15\xd1\xcb\x88\xd2\x7e\xab\x9d\xf4\xda\x1a\x78\xbd\x21\x94\xd6\xfd\xc3\x13\xab\xab\x38\x52\x49\xf6\xa8\xb7\x4a\x7a\x0a\x33\xec\xe5\x66\x8b\x9e\x36\xd8\x70\xff\xbf\x02\x63\x81\x05\x71\x5d\x79\x3c\xc9\xaa\xa6\xce\x4e\x03\x48\x70\x5d\x14\xc4\x0c\xf7\x8a\xe2\x20\x0d\xc8\xb9\xa0\x11\x64\x16\xe4\x6b\x67\x22\xce\x31\x00\xe0\x02\xd0\x06\x85\xe4\xa0\x7a\x90\x8a\x58\x36\x04\x74\x74\x6a\x42\x55\x96\x18\xc6\x7a\xd0\x5e\xb3\x3f\x50\x46\x2d\x65\x36\xbd\x86\x66\xec\x9c\x35\x3f\x92\xa4\xb2\x85\xac\x1a\x2b\x4c\xe0\x48\x69\x3e\x2f\x64\x55\xf5\xd2\x9b\xfc\x2e\x1d\x84\xc6\x56\x43\xd1\x4f\x12\x5d\x46\xd2\x04\xa5\xac\x98\x1a\x25\x93\x00\x2e\xae\x9a\x0d\x13\x32\x2a\x49\xa2\x4e\xb1\x66\x6b\xce\x15\x15\x56\x51\xef\x49\x56\xfd\xc3\xf4\x2a\x5d\x6b\x95\x0a\xbc\x4c\x9a\x7e\xbf\x34\xa5\xfe\x26\x33\x6a\x65\x56\x69\xac\x35\x15\x38\xb0\x47\x22\xfe\x8f\xc5\xa8\xef\x9b\x88\x79\x6b\xea\xcd\x03\xb9\x5e\x20\x5d\x89\x60\x16\xbe\xc7\x02\xd2\xa8\xf6\xfb\x65\x82\xb3\xb3\xa3\x61\x50\x8a\x3d\x9c\x1c\xc6\x22\xda\xb7\x99\xcc\xd8\x9a\xf6\x1e\x32\xa7\x7b\xba\x49\x2d\xbb\x49\x0d\x8e\x63\xaf\x39\xf9\xd7\xdb\xe9\x22\xef\xd2\x82\xe1\xa5\xe8\x37\xf5\xcc\xad\xd7\xe5\x73\x28\x67\x27\xb5\x27\xc7\xc7\xae\x9a\x37\xa6\x19\xca\x1a\x6a\x33\x3c\xe5\x32\x41\x6a\x1f\xd3\xe6\x05\xfd\x09\x94\x52\x57\xa4\xd2\x78\xef\x9b\xee\x2e\xb7\xf7\xef\x3f\x4d\x97\x1f\xfe\xba\x73\x73\xfe\xa1\x8b\x8b\xe4\x57\x00\x00\x00\xff\xff\xd0\x57\xad\xcd\xb2\x03\x00\x00")

func update_statusLuaBytes() ([]byte, error) {
	return bindataRead(
		_update_statusLua,
		"update_status.lua",
	)
}

func update_statusLua() (*asset, error) {
	bytes, err := update_statusLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "update_status.lua", size: 946, mode: os.FileMode(420), modTime: time.Unix(1487100360, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"update_status.lua": update_statusLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"update_status.lua": &bintree{update_statusLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

